import cv2 as cv
import numpy as np


def access_pixels(image):
    print(image.shape)
    height = image.shape[0]
    width = image.shape[1]
    channels = image.shape[2]  # 通道分别为 blue,green,red
    for row in range(height):
        for clo in range(width):
            for c in range(channels):
                pv = image[row, clo, c]
                image[row, clo, c] = 255 - pv
    cv.imshow("pixels_demo", image)
    print("height is %s, width is %s, channels is %s" % (height, width, channels))

# 两种初始化数组的方式np.ones和np.zeros


    def inverse(image):
        dst = cv.bitwise_not(image)
        cv.imshow("inverse demo",dst)
'''cv.bitwise_not是一种API bitwise_not是对二进制数据进行“非”操作，
即对图像（灰度图像或彩色图像均可）每个像素值进行二进制“非”操作，~1=0，~0=1
使用该方法可以快速达到access_pixels()函数的效果
'''



    def create_image():
        img = np.zeros([400, 400, 3], np.uint8)  # 初始化一个矩阵
        # img[:, :, 0] = np.ones([400, 400])*255  # 将矩阵变成蓝色
        img[:, :, 2] = np.ones([400, 400])*255  # 将矩阵变成红色


m1 = np.ones([3, 3], np.uint8)  # 创建一个三行三列的全是1的数组  数据类型为无符号为整形
print(m1)
m1.fill(12222.38)  # 将所有值替换成12222.38
print(m1)
m2 = m1.reshape(1, 9)  # 将该数组转换成一行九列
print(m2)
'''
src = cv.imread("C:/Users/Administrator/Desktop/1.jpg")
cv.namedWindow("input image", cv.WINDOW_AUTOSIZE)
cv.imshow("input image", src)
t1 = cv.getTickCount()  # 获取到目前为止你电脑CPU转的总数
access_pixels(src)
t2 = cv.getTickCount()
print("time : %s" % ((t2-t1)/cv.getTickFrequency()))  # 获取电脑一秒CPU转的数目
cv.waitKey(0)

cv.destroyAllWindows()'''
