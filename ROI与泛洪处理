import cv2 as cv
import numpy as np
# ROI(Region of Interest)区域, 对一张图上感兴趣的区域
# 根据numpy获取ROI  如face = src[50:250, 150:300]规定起始位置与结束位置

# 图像泛洪填充
'''
image 【输入/输出】 1或者3通道、 8bit或者浮点图像。仅当参数flags的FLOODFILL_MASK_ONLY标志位被设置时image不会被修改，否则会被修改。
mask 【输入/输出】 操作掩码，必须为单通道、8bit，且比image宽2个像素、高2个像素。使用前必须先初始化。
      Flood-filling无法跨越mask中的非0像素。例如，一个边缘检测的结果可以作为mask来阻止边缘填充。
      在输出中，mask中与image中填充像素对应的像素点被设置为1，或者flags标志位中设置的值(详见flags标志位的解释)。
      此外，该函数还用1填充了mask的边缘来简化内部处理。因此，可以在多个调用中使用同一mask，以确保填充区域不会重叠。
seedPoint 起始像素点
newVal 重绘像素区域的新的填充值(颜色)
rect 可选输出参数，返回重绘区域的最小绑定矩形。
loDiff 当前选定像素与其连通区中相邻像素中的一个像素，或者与加入该连通区的一个seedPoint像素，二者之间的最大下行差异值。
upDiff 当前选定像素与其连通区中相邻像素中的一个像素，或者与加入该连通区的一个seedPoint像素，二者之间的最大上行差异值。
flags flags标志位是一个32bit的int类型数据，其由3部分组成： 0-7bit表示邻接性(4邻接、8邻接)；8-15bit表示mask的填充颜色；16-31bit表示填充模式（详见填充模式解释）
'''


def fill_color_demo(image):
    copyImg = image.copy()
    h, w = image.shape[:2]
    mask = np.zeros([h+2, w+2], np.uint8)  # mask中的h和w一定要加2
    cv.floodFill(copyImg, mask, (30, 30), (0, 255, 255), (100, 100, 100), (50, 50, 50), cv.FLOODFILL_FIXED_RANGE)
# 最后一个参数改变图像,泛洪填充
# 在(30, 30)区域取到的像素减去100为最低值 加上50为最高值全部填充成为黄色
    cv.imshow("fill_color_demo", copyImg)

def fill_binary():
        image = np.zeros([400, 400, 3], np.uint8)
        image[100:300, 100:300, :] = 255
        cv.imshow("fill binary", image)

        mask = np.ones([402, 402, 1], np.uint8)  # mask全部设置为1 想填充的区域全部设置为0
        mask[101:301, 100:300] = 0
        cv.floodFill(image, mask, (200, 200), (100, 2, 255), cv.FLOODFILL_MASK_ONLY)
# 最后一个参数 不改变图像、只填充遮罩层本身、忽略新的颜色值参数
        cv.imshow("filled binary", image)


src = cv.imread("C:/Users/Administrator/Desktop/3.jpg")
cv.namedWindow("input image", cv.WINDOW_AUTOSIZE)
cv.imshow("input image", src)
'''
face = src[50:250, 150:300]
gray = cv.cvtColor(face, cv.COLOR_BGR2GRAY)
backface = cv.cvtColor(gray, cv.COLOR_GRAY2BGR)
src[50:250, 150:300] = backface
'''
fill_color_demo(src)
cv.imshow("face", src)
fill_binary()
cv.waitKey(0)

cv.destroyAllWindows()
