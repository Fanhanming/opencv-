# 像素运算 进行运算前输入的两个数组的大小必须完全一致 类型(dtype)也要完全一致
# 算术运算 加、减、乘、除,应用它调节亮度、调整对比度
# 逻辑预算 应用-遮罩层控制
import cv2 as cv
import numpy as np


# 两个图像相加
def add_demo(m1, m2):
    dst = cv.add(m1, m2)
    cv.imshow("add_demo", dst)


# 两个图像相减
def subtract_demo(m1, m2):
    dst = cv.subtract(m1, m2)
    cv.imshow("subtract_demo", dst)


# 两个图像相减
def multiply_demo(m1, m2):
    dst = cv.multiply(m1, m2)
    cv.imshow("divide_demo", dst)


# 逻辑运算
def logic_demo(m1, m2):
    dst = cv.bitwise_and(m1, m2)  # 与
    dst1 = cv.bitwise_or(m1, m2)
    dst2 = cv.bitwise_not(m1, m2)
    cv.imshow("logic_demo", dst)
    cv.imshow("logic_demo", dst1)
    cv.imshow("logic_demo", dst2)


# 调整对比度与亮度
def contrast_brightness_demo(image, c, b):
    h, w, ch = image.shape
    blank = np.zeros([h, w, ch], image.dtype)
    dst = cv.addWeighted(image, c, blank, 1-c, b)
    cv.imshow("con-bri-demo", dst)  # addWeighted（）函数是将两张相同大小，相同类型的图片融合的函数。他可以实现图片的特效，不多说了，直接上图。
 '''
参数1：src1，第一个原数组.
参数2：alpha，第一个数组元素权重
参数3：src2第二个原数组
参数4：beta，第二个数组元素权重
参数5：gamma，图1与图2作和后添加的数值。不要太大，不然图片一片白。总和等于255以上就是纯白色了。
参数6：dst，输出图片
'''

# 求均值与标准方差
def others(m1, m2):
    M1, dev1 = cv.mean(m1)  # 返回均值和标准方差
    M2, dev2 = cv.mean(m2)
    h, w = m1.shape[:2]

    print(M1)
    print(M2)

    print(dev1)  # 方差越大说明图像之间的差异性越大 方差越小说明图像之间的差异性(对比度)越小
    print(dev2)

    img = np.zeros([h, w], np.uint8)
    m, dev = cv.meanStdDev(img)  # 计算矩阵的均值和方差
    print(m)
    print(dev)  # 若均值和方差相等 我们可以判断出这个图像没有加载出有用的信息 如判断扫描仪是否损坏
    # 判断方差若小于某一个预值 直接pass


src1 = cv.imread("")
src2 = cv.imread("")
print(src1.shape)
print(src2.shape)
cv.namedWindow("image1", cv.WINDOW_AUTOSIZE)
cv.imshow("image1", src1)
cv.imshow("image2", src2)
# contrast_brightness_demo(src, c, b) c为需要提升的对比度,b为需要提升的亮度

# add_demo(src1, src2)
# subtract_demo(src1, src2)
# multiply_demo(src1, src2)
# others(src1, src2)
logic_demo(src1, src2)

cv.waitKey(0)

cv.destroyAllWindows()
